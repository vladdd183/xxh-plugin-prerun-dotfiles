#xpip install xontrib-jedi
#pip install xontrib-readable-traceback
#xpip install xontrib-xlsd
#pip install xontrib-kitty
#xpip install -U xontrib-pipeliner
#xpip install -U xontrib-powerline2
#xpip install -U xontrib-output-search
#xpip install -U xontrib-sh
#pip install xontrib-fzf-widgets
#sudo apt install zoxide fzf
#yay -S carapace-bin


# $PATH.append('/home/ubuntu/.cargo/bin')


COMPLETIONS_CONFIRM=True
exec($(carapace _carapace))

$XONTRIB_OUTPUT_SEARCH_KEY='f'
xontrib load output_search

$XONSH_HISTORY_BACKEND = 'sqlite'
xontrib load jump_to_dir

$XONTRIB_SH_SHELLS = ['bash', 'sh']  # default
xontrib load sh


import shutil as _shutil
from xonsh.platform import ON_LINUX #, ON_DARWIN, ON_WINDOWS, ON_WSL, IN_APPIMAGE, ON_CYGWIN, ON_MSYS, ON_POSIX, ON_FREEBSD, ON_DRAGONFLY, ON_NETBSD, ON_OPENBSD

xontrib load onepath
$XONTRIB_ONEPATH_ACTIONS['text/'] = 'nvim'
def _cdls(args):
     cd @(args[0])
     if int($(ls | wc -l).strip()) < 100:
         ls
     else:
     	print('>100 files')
aliases['cdls'] = _cdls
del _cdls

$XONTRIB_ONEPATH_ACTIONS['<DIR>'] = 'cdls'


if ON_LINUX and _shutil.which('nvim'):
    $XONTRIB_ONEPATH_ACTIONS['text/'] = 'nvim'
    
    

xontrib load pipeliner

xontrib load abbrevs
abbrevs['gst'] = 'git status'

xontrib load skim # Initializes skim (fuzzy finder)
# configure like in the example above, but replace envx['VAR'] with $VAR
$X_SKIM_KEY_HISTORY = "c-s"


#$XONSH_CAPTURE_ALWAYS=True




xontrib load xontrib-zoxide
xontrib load jedi
xontrib load readable-traceback
#https://github.com/vaaaaanquish/xontrib-readable-traceback

xontrib load xlsd
xontrib load kitty
xontrib load pipeliner


xonsh_color_style="fruity"


def cwd_base():
    return ["{cwd_base}", "BLACK", "#00adee"]

def bg_jobs(*args):
    jbs = $(jobs)
    bg_jbs = jbs.count("running")
    s = 'ðŸ’¼' + str(bg_jbs) + "|" + str(len(jbs.split('\n'))-1)
    if s == "ðŸ’¼0|0":
	return None

    return [s, "BLACK", "BLUE"]

def timing_txt():
    return ["Elapsed time:", "BLACK", "#00adee"]

def prev_cmd():
    prev_cmd = __xonsh__.history[-1].cmd if __xonsh__.history else None
    if not prev_cmd:
        return ["Hello", "BLACK", "#FFadee"]
    prev_cmd = prev_cmd.rstrip()
    return [prev_cmd, "BLACK", "#DAA520"]

def bar():
    size = $(stty size)
    y, x = size.split()
    x = int(x)
    str = " "*x
    return [str, "BLACK", "#CD853F"]

def lcltime():
    return ["{localtime}", "BLACK", "#00adee"]

$PL_EXTRA_SEC = {"cwd_base": cwd_base,
                 "bg_jobs": bg_jobs,
                 "timing_txt": timing_txt,
                 "prev_cmd": prev_cmd,
                 "bar": bar,
                 "lcltime": lcltime
                 }

$PL_COLORS= {}
$PL_COLORS['history'] = ("BOLD_WHITE", "#EC2D01")
$PL_COLORS['timing'] = ("BOLD_BLACK", "#800080")

$PL_COLORS['cwd'] = ("BOLD_BLACK", "#FF8800")


$XONSH_CTRL_BKSP_DELETION=True


$PL_PROMPT="timing_txt>timing>prev_cmd>bar>\nhistory>bg_jobs"
$PL_TOOLBAR='lcltime>who>cwd'
$PL_RPROMPT = 'short_cwd>virtualenv>branch'
xontrib load powerline2

$XONTRIB_SH_SHELLS = ['bash', 'sh']
xontrib load sh


xontrib load output_search



$fzf_history_binding = "c-r"  # Ctrl+R
$fzf_ssh_binding = "c-s"      # Ctrl+S
$fzf_file_binding = "c-t"      # Ctrl+T
#$fzf_dir_binding = "c-g"      # Ctrl+G
xontrib load fzf-widgets


from prompt_toolkit.keys import Keys
@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    handler = bindings.add

    def _navi_call(*args):
        result = $(navi *args </dev/tty)
        print(result)


    @handler(Keys.ControlG)
    def navi_widget(event, *args):
        buffer = event.current_buffer.text

        $lst = buffer.split('|')[-1]

        $lst_command = $(echo $lst | navi fn widget::last_command)


        navi --print --query $lst_command










